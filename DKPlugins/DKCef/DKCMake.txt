IF(ANDROID)
	RETURN()
ENDIF()
IF(IOSSIM)
	RETURN()
ENDIF()

DKSET(QUEUE_BUILD ON)
##DKDEPEND(cef_binary_3.2623.1396.g0451528_windows32)
##DKDEPEND(cef_binary_3.2623.1396.g0451528_windows64)
##DKDEPEND(cef_binary_3.2623.1396.g0451528_macosx64)
DKDEPEND(cef_binary_3.2623.1396.g0451528_linux64)
DKDEPEND(cef_binary_3.2704.1434.gec3e9ed_windows32)
DKDEPEND(cef_binary_3.2704.1434.gec3e9ed_windows64)
DKDEPEND(cef_binary_3.2704.1434.gec3e9ed_macosx64)
##DKDEPEND(cef_binary_3.2704.1434.gec3e9ed_linux64)
##DKDEPEND(cef_binary_3.2743.1432.g66425de_macosx64)
DKDEPEND(DKWindow)
DKDEPEND(upx391w)

DKPLUGIN(DKCef)
DKASSETS(DKCef)


IF(WIN_32)
	IF(DEBUG)
		DKCOPY(${CEF}/Debug/ ${DKPLUGINS}/DKCef/dkwin32/Debug FALSE)
		DKCOPY(${CEF}/Resources/icudtl.dat ${DKPLUGINS}/DKCef/dkwin32/Debug TRUE)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/cef_sandbox.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/d3dcompiler_47.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/d3dcompiler_43.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/libGLESv2.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/libcef.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Debug/wow_helper.exe)
		LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:libcef.dll)
	ENDIF()
	IF(RELEASE)
		DKCOPY(${CEF}/Release/ ${DKPLUGINS}/DKCef/dkwin32/Release FALSE)
		DKCOPY(${CEF}/Resources/icudtl.dat ${DKPLUGINS}/DKCef/dkwin32/Release TRUE)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/cef_sandbox.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/d3dcompiler_47.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/d3dcompiler_43.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/libGLESv2.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/libcef.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin32/Release/wow_helper.exe)
		LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:libcef.dll)
		UPX_COMPRESS(${DKPLUGINS}/DKCef/dkwin32/Release/libcef.dll)
	ENDIF()
	
	DKCOPY(${CEF}/Resources/ ${DKPLUGINS}/DKCef FALSE)
	FILE(REMOVE ${DKPLUGINS}/DKCef/icudtl.dat)
	DKCOPY(${DKPLUGINS}/DKCef/win32/Release/cefchild.exe ${DKPLUGINS}/DKCef TRUE)
ENDIF()

IF(WIN_64)
	IF(DEBUG)
		DKCOPY(${CEF}/Debug/ ${DKPLUGINS}/DKCef/dkwin64/Debug FALSE)
		DKCOPY(${CEF}/Resources/icudtl.dat ${DKPLUGINS}/DKCef/dkwin64/Debug FALSE)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/cef_sandbox.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/d3dcompiler_47.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/d3dcompiler_43.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/libGLESv2.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/libcef.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Debug/wow_helper.exe)
		LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:libcef.dll)
	ENDIF()
	IF(RELEASE)
		DKCOPY(${CEF}/Release/ ${DKPLUGINS}/DKCef/dkwin64/Release FALSE)
		DKCOPY(${CEF}/Resources/icudtl.dat ${DKPLUGINS}/DKCef/dkwin64/Release FALSE)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/cef_sandbox.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/d3dcompiler_47.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/d3dcompiler_43.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/libGLESv2.dll)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/libcef.lib)
		FILE(REMOVE ${DKPLUGINS}/DKCef/dkwin64/Release/wow_helper.exe)
		LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:libcef.dll)
		UPX_COMPRESS(${DKPLUGINS}/DKCef/dkwin64/Release/libcef.dll)
	ENDIF()
	
	DKCOPY(${CEF}/Resources/ ${DKPLUGINS}/DKCef FALSE)
	FILE(REMOVE ${DKPLUGINS}/DKCef/icudtl.dat)
	DKCOPY(${DKPLUGINS}/DKCef/win64/Release/cefchild.exe ${DKPLUGINS}/DKCef TRUE)
ENDIF()

IF(MAC_64)
	FILE(MAKE_DIRECTORY ${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks)
	DKCOPY(${CEF}/Debug ${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks TRUE)
	FILE(MAKE_DIRECTORY ${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks)
	DKCOPY(${CEF}/Release ${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks TRUE)

	DKCOPY(${DKPLUGINS}/DKCef/mac64/Debug/cefchild.app ${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/cefchild.app TRUE)
	DKRENAME(${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/cefchild.app/Contents/MacOS/cefchild "${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/cefchild.app/Contents/MacOS/${AppName} Helper")
	DKRENAME(${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/cefchild.app "${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/${AppName} Helper.app")
	DKCOPY(${DKPLUGINS}/DKCef/mac64/Release/cefchild.app ${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks/cefchild.app TRUE)
	DKRENAME(${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks/cefchild.app/Contents/MacOS/cefchild "${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks/cefchild.app/Contents/MacOS/${AppName} Helper")
	DKRENAME(${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks/cefchild.app "${DKPROJECT}/mac64/Release/${AppName}.app/Contents/Frameworks/${AppName} Helper.app")

	##MAC_COMMAND(install_name_tool -change "@executable_path/Chromium Embedded Framework" "@executable_path/../../../../Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework" "${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/Frameworks/${AppName} Helper.app/Contents/MacOS/${AppName} Helper")
	
	##FIXME - command does not work because app does not exist yet
	##MAC_COMMAND(install_name_tool -change "@executable_path/Chromium Embedded Framework" "@executable_path/../Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework" "${DKPROJECT}/mac64/Debug/${AppName}.app/Contents/MacOS/${AppName}")
ENDIF()

IF(LINUX_64)
	DKREMOVE(${DKPROJECT}/assets/DKCef/cefchild)
	IF(DEBUG)
		DKCOPY(${DKPLUGINS}/DKCef/linux64/Debug/cefchild ${DKPROJECT}/assets/DKCef TRUE)
	ENDIF()
	IF(RELEASE)
		DKCOPY(${DKPLUGINS}/DKCef/linux64/Release/cefchild ${DKPROJECT}/assets/DKCef TRUE)
	ENDIF()
ENDIF()

DKASSETS(DKCef)



## cefchild win32
IF(WIN_32)
	DKAPPEND_CMAKE("CMAKE_MINIMUM_REQUIRED(VERSION 3.0) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/FUNCTIONS.cmake) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/OPTIONS.cmake) \n")
	DKAPPEND_CMAKE("PROJECT(DKCef) \n\n")
	DKAPPEND_CMAKE("INCLUDE_DIRECTORIES(${CEF}) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcefD libcef.lib ${CEF}/Debug) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcefR libcef.lib ${CEF}/Release) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperD libcef_dll_wrapper.lib ${CEF}/win32/libcef_dll_wrapper/Debug) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperR libcef_dll_wrapper.lib ${CEF}/win32/libcef_dll_wrapper/Release) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcefD}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcefR}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcef_dll_wrapperD}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcef_dll_wrapperR}) \n")
	DKAPPEND_CMAKE("FILE(GLOB cefchild_SRC ${DKPLUGINS}/DKCef/cefchild/*.cpp) \n")	
	DKAPPEND_CMAKE("ADD_EXECUTABLE(cefchild WIN32 \${cefchild_SRC}) \n")
	DKAPPEND_CMAKE("TARGET_LINK_LIBRARIES(cefchild \${CEF_DEBUG_LIBS} \${CEF_RELEASE_LIBS}) \n")
	DKAPPEND_CMAKE("SET_TARGET_PROPERTIES(cefchild PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\") \n")
ENDIF()

## cefchild win64
IF(WIN_64)
	DKAPPEND_CMAKE("CMAKE_MINIMUM_REQUIRED(VERSION 3.0) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/FUNCTIONS.cmake) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/OPTIONS.cmake) \n")
	DKAPPEND_CMAKE("PROJECT(DKCef) \n\n")
	DKAPPEND_CMAKE("INCLUDE_DIRECTORIES(${CEF}) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcefD libcef.lib ${CEF}/Debug) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcefR libcef.lib ${CEF}/Release) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperD libcef_dll_wrapper.lib ${CEF}/win64/libcef_dll_wrapper/Debug) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperR libcef_dll_wrapper.lib ${CEF}/win64/libcef_dll_wrapper/Release) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcefD}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcefR}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcef_dll_wrapperD}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcef_dll_wrapperR}) \n")	
	DKAPPEND_CMAKE("FILE(GLOB cefchild_SRC ${DKPLUGINS}/DKCef/cefchild/*.cpp) \n")
	DKAPPEND_CMAKE("ADD_EXECUTABLE(cefchild WIN64 \${cefchild_SRC}) \n")
	DKAPPEND_CMAKE("TARGET_LINK_LIBRARIES(cefchild \${CEF_DEBUG_LIBS} \${CEF_RELEASE_LIBS}) \n")
	DKAPPEND_CMAKE("SET_TARGET_PROPERTIES(cefchild PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\") \n")
ENDIF()

## cefchild mac64
IF(MAC_64)
	DKAPPEND_CMAKE("CMAKE_MINIMUM_REQUIRED(VERSION 3.0) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/FUNCTIONS.cmake) \n")
	DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/OPTIONS.cmake) \n")
	DKAPPEND_CMAKE("PROJECT(DKCef) \n\n")
	DKAPPEND_CMAKE("INCLUDE_DIRECTORIES(${CEF}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \"${CEF}/Debug/Chromium Embedded Framework.framework\") \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \"${CEF}/Release/Chromium Embedded Framework.framework\") \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperD libcef_dll_wrapper.a ${CEF}/${OS}/libcef_dll_wrapper/${DEBUG}) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperR libcef_dll_wrapper.a ${CEF}/${OS}/libcef_dll_wrapper/${RELEASE}) \n")
	DKAPPEND_CMAKE("FIND_LIBRARY(AK AppKit)\n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcef_dll_wrapperD}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcef_dll_wrapperR}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS ${AK}) \n")
	DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS ${AK}) \n")
	DKAPPEND_CMAKE("FILE(GLOB cefchild_SRC ${DKPLUGINS}/DKCef/cefchild/*.cpp) \n")
	DKAPPEND_CMAKE("SET(CMAKE_OSX_ARCHITECTURES \"x86_64\") \n")
	DKAPPEND_CMAKE("ADD_EXECUTABLE(cefchild MACOSX_BUNDLE \${cefchild_SRC}) \n")
	DKAPPEND_CMAKE("TARGET_LINK_LIBRARIES(cefchild \${CEF_DEBUG_LIBS} \${CEF_RELEASE_LIBS}) \n")
ENDIF()

## cefchild linux64
IF(LINUX_64)
	IF(DEBUG)
		DKAPPEND_CMAKE("CMAKE_MINIMUM_REQUIRED(VERSION 3.0) \n")
		DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/FUNCTIONS.cmake) \n")
		DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/OPTIONS.cmake) \n")
		DKAPPEND_CMAKE("PROJECT(DKCef) \n\n")
		DKAPPEND_CMAKE("INCLUDE_DIRECTORIES(${CEF}) \n")
		DKAPPEND_CMAKE("FIND_LIBRARY(libcefD libcef.so ${CEF}/Debug) \n")
		DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperD libcef_dll_wrapper.a ${CEF}/${OS}/Debug/libcef_dll) \n")
		DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcefD}) \n")
		DKAPPEND_CMAKE("LIST(APPEND CEF_DEBUG_LIBS debug \${libcef_dll_wrapperD}) \n")
		DKAPPEND_CMAKE("FILE(GLOB cefchild_SRC ${DKPLUGINS}/DKCef/cefchild/*.cpp) \n")
		DKAPPEND_CMAKE("ADD_EXECUTABLE(cefchild \${cefchild_SRC}) \n")
		DKAPPEND_CMAKE("TARGET_LINK_LIBRARIES(cefchild  \${CEF_DEBUG_LIBS}) \n")
	ENDIF()
	IF(RELEASE)
		DKAPPEND_CMAKE("CMAKE_MINIMUM_REQUIRED(VERSION 3.0) \n")
		DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/FUNCTIONS.cmake) \n")
		DKAPPEND_CMAKE("INCLUDE(${DKCMAKE}/OPTIONS.cmake) \n")
		DKAPPEND_CMAKE("PROJECT(DKCef) \n\n")
		DKAPPEND_CMAKE("INCLUDE_DIRECTORIES(${CEF}) \n")
		DKAPPEND_CMAKE("FIND_LIBRARY(libcefR libcef.so ${CEF}/Release) \n")
		DKAPPEND_CMAKE("FIND_LIBRARY(libcef_dll_wrapperR libcef_dll_wrapper.a ${CEF}/${OS}/Release/libcef_dll) \n")
		DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcefR}) \n")
		DKAPPEND_CMAKE("LIST(APPEND CEF_RELEASE_LIBS optimized \${libcef_dll_wrapperR}) \n")	
		DKAPPEND_CMAKE("FILE(GLOB cefchild_SRC ${DKPLUGINS}/DKCef/cefchild/*.cpp) \n")
		DKAPPEND_CMAKE("ADD_EXECUTABLE(cefchild \${cefchild_SRC}) \n")
		DKAPPEND_CMAKE("TARGET_LINK_LIBRARIES(cefchild  \${CEF_RELEASE_LIBS}) \n")
	ENDIF()
ENDIF()


